using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApp
{
    class Program
    {
        public static void Main()
        {
            SinglyLinkedList<int> list = new SinglyLinkedList<int>(Enumerable.Range(0, 50));
            list.Dump("Before reversing");
            list.ReverseUsingRecursion();
            list.Dump("After reversing");
        }
    }

    class SinglyLinkedList<T>
    {
        public SinglyLinkedList() : this(default(T))
        { }
        public SinglyLinkedList(T data)
        {
            Head = Last = new Node<T>(data);
            Last.Next = null;
        }
        
        public SinglyLinkedList(IEnumerable<T> collection)
        {
            if (collection == null)
            {
                throw new ArgumentException(nameof(collection));
            }

            foreach (var element in collection)
            {
                AddLast(new Node<T>(element));
            }
        }

        void AddLast(Node<T> newNode)
        {
            if (Head == null) Head = newNode;
            else
            {
                Last.Next = newNode;
            }
            Last = newNode;
            Last.Next = null;
        }

        public Node<T> Head;
        public Node<T> Last;
    }
    
    public class Node<T>
    {
        public Node(T data)
        {
            Data = data;
            Next = null;
        }

        public T Data;
        public Node<T> Next;
    }
    
    static class CommonExtensions
    {
        public static void ReverseUsingPointers<T>(this SinglyLinkedList<T> list)
        {
            Node<T> prev = null;
            Node<T> next = null;
            Node<T> curr = list.Head;

            while (curr != null)
            {
                next = curr.Next;
                curr.Next = prev;
                prev = curr;
                curr = next;
            }
            list.Head = prev;
        }
        
        public static void ReverseUsingRecursion<T>(this SinglyLinkedList<T> list)
        {
            // Handle edge cases
            if (list.Head?.Next == null) return;

            f_reverse(null, list.Head);
            
            void f_reverse(Node<T> prev, Node<T> curr)
            {
                if (curr == null) list.Head = prev;
                else
                {
                    f_reverse(curr, curr.Next);
                    curr.Next = prev;
                }
            }
        }
        
        public static void Dump<T>(this SinglyLinkedList<T> list, string message)
        {
            Console.WriteLine(message);
            var current = list.Head;
            Console.Write("First --> ");
            while (current != null)
            {
                Console.Write($"{current.Data} --> ");
                current = current.Next;
            }
            Console.WriteLine("GROUND");
        }
    }
}
